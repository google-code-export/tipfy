# -*- coding: utf-8 -*-
"""
    tipfy.ext.user
    ~~~~~~~~~~~~~~

    Base user models, authentication and permissions extension.

    This file derives from Zine and Kay projects.

    :copyright: (c) 2009 by the Zine Team, see AUTHORS for more details.
    :Copyright: (c) 2009 Accense Technology, Inc.
                         Takashi Matsuo <tmatsuo@candit.jp>,
                         Ian Lewis <IanMLewis@gmail.com>
                         All rights reserved.
    :license: BSD, see LICENSE for more details.
"""
from tipfy import local, import_string

USER_MODEL = None


def get_user_model():
    """Returns the configured user model class, cached in this module."""
    global USER_MODEL
    if USER_MODEL is None:
        USER_MODEL = import_string(local.app.config.user_model)
    return USER_MODEL


def create_user(user_name, password=None, **kwargs):
    """Saves a new user using the configured user model class."""
    if password:
        from tipfy.ext.user.models import gen_pwhash
        kwargs['password'] = gen_pwhash(password)

    return get_user_model().create(user_name, **kwargs)


def create_auth_url(action, url):
    """Returns a login or logout url generated by the user model. This is the
    same approach used by `google.appengine.api.users`, however it adds the
    possibility to use own login and logout urls, if the model customizes them.
    """
    if url is None:
        url = local.request.url

    return getattr(get_user_model(), 'create_%s_url' % action)(url)


def create_logout_url(url=None):
    """Returns the URL for a logout page defined by the user model."""
    return create_auth_url('logout', url)


def create_login_url(url=None):
    """Returns the URL for a login page defined by the user model."""
    return create_auth_url('login', url)


def login_required():
    """Decorator that requires an user to be authenticated *and* have an user
    record created. This means that, for authentication using Google Accounts,
    users are redirected to set an user_name and save an User entity in the
    datastore, if they have not done it yet.
    """
    pass


def admin_required():
    """Decorator that requires an user to be authenticated and have admin
    privileges.
    """
    pass
